generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  password    String
  userType    UserType
  first_name  String
  last_name   String
  address     String?
  apartment   String?
  city        String?
  state       String?
  pincode     String?
  phone       String?
  orders      Order[]
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  discount    Float?
  photo       String
  inventory   Int
  short_desc  String?
  long_desc   String?
  length      Float?  
  breadth     Float?
  height      Float?
  weight      Float?
  status      Boolean
  orders      OrderItem[]
}

model Order {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  userId              String
  user                User          @relation(fields: [userId], references: [id])
  status              OrderStatus
  orderItems          OrderItem[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  total               Float?
  payment             Payment?
  shipping            Shipping?
  couponId            String?
  coupon              Coupon?       @relation(fields: [couponId], references: [id])
  cancellationReason  String?
  returnReason        String?
  return              Return?
}

model OrderItem {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String
  order      Order         @relation(fields: [orderId], references: [id])
  productId  String
  product    Product       @relation(fields: [productId], references: [id])
  name       String
  price      Float
  discount   Float
  photo      String
  quantity   Int
}

model Payment {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String         @unique
  order     Order          @relation(fields: [orderId], references: [id])
  method    String
  amount    Float
  status    PaymentStatus
  date      DateTime       @default(now())
}

model Shipping {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId             String         @unique
  order               Order          @relation(fields: [orderId], references: [id])
  address             String
  city                String
  state               String
  pinCode             String
  freight_charge      Float
  etd                 String
  courier_company_id  Int
  courier_name        String
  status              ShippingStatus
  shippedAt           DateTime?
  deliveredAt         DateTime?
}

model Coupon {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  code      String     @unique
  discount  Float
  expiry    DateTime
  isActive  Boolean
  orders    Order[]
}

model Return {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String      @unique
  order       Order       @relation(fields: [orderId], references: [id])
  reason      String
  status      String      // e.g., REQUESTED, APPROVED, REJECTED
  requestedAt DateTime    @default(now())
  processedAt DateTime?
}
