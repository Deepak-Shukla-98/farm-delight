generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  CUSTOMER
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String     @unique
  password    String
  userType    UserType
  first_name  String
  last_name   String
  address     String?
  apartment   String?
  city        String?
  state       String?
  pincode     String?
  phone       String?
  orders      Order[]
  cart         Cart?
}

model Product {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Float
  discount   Float
  photo      String
  inventory  Int
  status     Boolean
  orderItems OrderItem[]
  cartItems CartItem[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  status     Boolean
  orderItems OrderItem[]
  payment    Payment?
  shipping   Shipping?
  couponId   String?
  coupon     Coupon?     @relation(fields: [couponId], references: [id])
}

model OrderItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  productId String
  product   Product     @relation(fields: [productId], references: [id])
  price     Float
  discount  Float
  quantity  Int
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  productId String
  product   Product    @relation(fields: [productId], references: [id])
  quantity  Int
  cartId    String
  cart      Cart       @relation(fields: [cartId], references: [id])
}

model Payment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String     @unique
  order     Order      @relation(fields: [orderId], references: [id])
  method    String
  amount    Float
  status    String
  date      DateTime   @default(now())
}

model Shipping {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String     @unique
  order       Order      @relation(fields: [orderId], references: [id])
  address     String
  city        String
  state       String
  pinCode     String
  status      String
  shippedAt   DateTime?
  deliveredAt DateTime?
}

model Coupon {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  code      String     @unique
  discount  Float
  expiry    DateTime
  isActive  Boolean
  orders    Order[]
}
